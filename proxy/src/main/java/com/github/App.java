package com.github;

/**
 * 意图
 * 为其他对象提供一种代理以控制对这个对象的访问。
 *
 * 适用性
 * 在需要用比较通用和复杂的对象指针代替简单的指针的时候，使用Proxy模式。下面是一些可以使用Proxy模式常见情况：
 *
 * 远程代理（RemoteProxy）为一个对象在不同的地址空间提供局部代表。
 * 虚代理（VirtualProxy）根据需要创建开销很大的对象。
 * 保护代理（ProtectionProxy）控制对原始对象的访问。保护代理用于对象应该有不同的访问权限的时候。
 * 智能指引（SmartReference）取代了简单的指针，它在访问对象时执行一些附加操作。它的典型用途包括：
 * 对指向实际对象的引用计数，这样当该对象没有引用时，可以自动释放它（也称为SmartPointers）。
 * 当第一次引用一个持久对象时，将它装入内存。
 * 在访问一个实际对象前，检查是否已经锁定了它，以确保其他对象不能改变它。
 *
 *
 * 代理模式区分与装饰模式：
 * 装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问
 * 代理模式给一个对象提供一个代理对象，并有代理对象来控制对原有对象的引用；
 * 装饰模式应该为所装饰的对象增强功能；
 * 代理模式对代理的对象施加控制，并不提供对象本身的增强功能
 */
public class App 
{
    public static void main( String[] args )
    {
        Subject subject = new Proxy();
        subject.doSomething();
    }
}
